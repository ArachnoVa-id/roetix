name: NovaTix VPS Develop

on:
  push:
    branches:
      - develop

jobs:
  # test-build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 🛠 Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: 🔧 Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 'lts/*'
  #         cache: 'npm'

  #     - name: 📦 Install Frontend Dependencies
  #       run: |
  #         rm -rf node_modules package-lock.json
  #         npm install --legacy-peer-deps

  #     - name: 🏗 Build Frontend (Vite)
  #       run: npm run build

  # test-laravel:
  #   runs-on: ubuntu-latest
  #   needs: test-build # Run Laravel tests after Vite build
  #   steps:
  #     - name: 🛠 Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: 🔧 Setup PHP
  #       uses: shivammathur/setup-php@v2
  #       with:
  #         php-version: 8.2
  #         extensions: mbstring, bcmath, xml, pdo_mysql
  #         tools: composer, phpunit

  #     - name: 📦 Install Backend Dependencies
  #       run: composer install --no-dev --optimize-autoloader

  #     - name: 🛠 Set Up Laravel Environment
  #       run: |
  #         cp .env.example .env
  #         php artisan key:generate

  #     - name: 🛠 Run Laravel Tests
  #       run: php artisan test

  vps_sync:
    runs-on: ubuntu-latest
    # needs: test-laravel # Deploy only if Laravel tests pass

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/av_rsa
          chmod 600 ~/.ssh/av_rsa
          ssh-keyscan -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts

      - name: Ensure Folder Structure & Create Scripts
        run: |
          ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'bash -s' << 'EOF'
          set -e

          echo "Ensuring folder structure..."
          mkdir -p ~/novatix/app/develop ~/novatix/setups

          # Ensure update_repo.sh exists
          echo "Creating update_repo.sh..."
          cat > ~/novatix/setups/update_repo.sh << 'EOT'
          #!/bin/bash
          mkdir -p ~/novatix/app/develop
          cd ~/novatix

          if [ ! -d "app/develop/.git" ]; then
              echo "Repository not found. Checking existing directory..."
              if [ -n "$(ls -A app 2>/dev/null)" ]; then
                  echo "Existing directory found but not a Git repository. Removing everything..."
                  rm -rf app/develop
              fi
              echo "Cloning repository..."
              git clone git@github.com:ArachnoVa-id/novatix.git app/develop
          else
              echo "Repository found. Pulling latest changes..."
              cd app/develop
              git pull origin main
          fi
          ls -la  # Debugging: Show contents
          EOT
          chmod +x ~/novatix/setups/update_repo.sh

          # Ensure install_dependencies.sh exists
          echo "Creating install_dependencies.sh..."
          cat > ~/novatix/setups/install_dependencies.sh << 'EOT'
          #!/bin/bash
          cd ~/novatix/app/develop
          composer install --no-interaction --prefer-dist
          EOT
          chmod +x ~/novatix/setups/install_dependencies.sh

          # Ensure deploy_laravel.sh exists
          echo "Creating deploy_laravel.sh..."
          cat > ~/novatix/setups/deploy_laravel.sh << 'EOT'
          #!/bin/bash
          cd ~/novatix/app/develop
          php artisan migrate --force --seed
          php artisan config:clear
          php artisan cache:clear
          php artisan route:cache
          EOT
          chmod +x ~/novatix/setups/deploy_laravel.sh

          # Ensure restart_services.sh exists
          echo "Creating restart_services.sh..."
          cat > ~/novatix/setups/restart_services.sh << 'EOT'
          #!/bin/bash
          sudo systemctl restart php8.2-fpm
          EOT
          chmod +x ~/novatix/setups/restart_services.sh

          # Ensure generate_env.sh exists
          echo "Creating generate_env.sh..."
          cat > ~/novatix/setups/generate_env.sh << 'EOT'
          #!/bin/bash

          ENV_FILE="$HOME/novatix/app/develop/.env"

          echo "Checking .env file..."
          if [ ! -f "$ENV_FILE" ]; then
              echo "Generating .env file..."

              cat > "$ENV_FILE" <<EOF
          APP_NAME=${APP_NAME}
          APP_ENV=${APP_ENV}
          APP_KEY=${APP_KEY}
          APP_DEBUG=${APP_DEBUG}
          APP_TIMEZONE=${APP_TIMEZONE}
          APP_URL=${APP_URL}

          APP_LOCALE=${APP_LOCALE}
          APP_FALLBACK_LOCALE=${APP_FALLBACK_LOCALE}
          APP_FAKER_LOCALE=${APP_FAKER_LOCALE}

          APP_MAINTENANCE_DRIVER=${APP_MAINTENANCE_DRIVER}
          PHP_CLI_SERVER_WORKERS=${PHP_CLI_SERVER_WORKERS}

          BCRYPT_ROUNDS=${BCRYPT_ROUNDS}

          LOG_CHANNEL=${LOG_CHANNEL}
          LOG_STACK=${LOG_STACK}
          LOG_DEPRECATIONS_CHANNEL=${LOG_DEPRECATIONS_CHANNEL}
          LOG_LEVEL=${LOG_LEVEL}

          DB_CONNECTION=${DB_CONNECTION}
          DB_HOST=${DB_HOST}
          DB_PORT=${DB_PORT}
          DB_DATABASE=${DB_DATABASE_DEV}
          DB_USERNAME=${DB_USERNAME}
          DB_PASSWORD=${DB_PASSWORD}

          SESSION_DRIVER=${SESSION_DRIVER}
          SESSION_LIFETIME=${SESSION_LIFETIME}
          SESSION_ENCRYPT=${SESSION_ENCRYPT}
          SESSION_PATH=${SESSION_PATH}
          SESSION_DOMAIN=${SESSION_DOMAIN}

          BROADCAST_CONNECTION=${BROADCAST_CONNECTION}
          FILESYSTEM_DISK=${FILESYSTEM_DISK}
          QUEUE_CONNECTION=${QUEUE_CONNECTION}

          CACHE_STORE=${CACHE_STORE}
          CACHE_PREFIX=${CACHE_PREFIX}

          MEMCACHED_HOST=${MEMCACHED_HOST}

          REDIS_CLIENT=${REDIS_CLIENT}
          REDIS_HOST=${REDIS_HOST}
          REDIS_PASSWORD=${REDIS_PASSWORD}
          REDIS_PORT=${REDIS_PORT}

          MAIL_MAILER=${MAIL_MAILER}
          MAIL_SCHEME=${MAIL_SCHEME}
          MAIL_HOST=${MAIL_HOST}
          MAIL_PORT=${MAIL_PORT}
          MAIL_USERNAME=${MAIL_USERNAME}
          MAIL_PASSWORD=${MAIL_PASSWORD}
          MAIL_FROM_ADDRESS=${MAIL_FROM_ADDRESS}
          MAIL_FROM_NAME=${APP_NAME}

          AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
          AWS_BUCKET=${AWS_BUCKET}
          AWS_USE_PATH_STYLE_ENDPOINT=${AWS_USE_PATH_STYLE_ENDPOINT}

          VITE_APP_NAME=${APP_NAME}
          EOF

              chmod 600 "$ENV_FILE"
              echo ".env file generated successfully."
          else
              echo ".env file already exists. Skipping generation."
          fi
          EOT
          chmod +x ~/novatix/setups/generate_env.sh

          EOF

      - name: Update Repository on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/update_repo.sh"

      - name: Generate .env on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/generate_env.sh"

      - name: Install Dependencies on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/install_dependencies.sh"

      - name: Deploy Laravel on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/deploy_laravel.sh"

      - name: Restart Services on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/restart_services.sh"

name: NovaTix VPS Develop

# This workflow is designed to deploy the NovaTix application to a VPS server.
on:
  push:
    branches:
      - develop

jobs:
  test-build:
    runs-on: ubuntu-latest
    steps:
      - name: 🛠 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: 📦 Install Frontend Dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install --legacy-peer-deps

      - name: 🏗 Build Frontend (Vite)
        run: npm run build

  test-laravel:
    runs-on: ubuntu-latest
    needs: test-build
    steps:
      - name: 🛠 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: mbstring, bcmath, xml, pdo_mysql, pdo_sqlite
          tools: composer, phpunit

      - name: 📦 Install Backend Dependencies
        run: composer install --optimize-autoloader --no-interaction --no-scripts --ignore-platform-reqs

      - name: 🛠 Set Up Laravel Environment
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Install Node.js dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install --legacy-peer-deps

      - name: Build frontend assets with Vite
        run: npm run build

      - name: Start Laravel built-in server
        run: php artisan serve --host=127.0.0.1 --port=8000 &

      - name: 🛠 Run Laravel Tests
        run: php artisan test

  vps-sync:
    runs-on: ubuntu-latest
    needs: test-laravel

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/av_rsa
          chmod 600 ~/.ssh/av_rsa
          ssh-keyscan -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts

      - name: Ensure Folder Structure & Create Scripts
        run: |
          ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'bash -s' << 'EOF'
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          set -e

          echo "Ensuring folder structure..."
          mkdir -p ~/novatix/app/develop ~/novatix/setups

          # update_repo.sh
          echo "Creating update_repo.sh..."
          cat > ~/novatix/setups/update_repo.sh << 'EOT'
          #!/bin/bash
          set -e
          mkdir -p ~/novatix/app/develop
          cd ~/novatix

          if [ ! -d "app/develop/.git" ]; then
              echo "Repository not found. Checking existing directory..."
              if [ -n "$(ls -A app 2>/dev/null)" ]; then
                  echo "Existing directory found but not a Git repository. Removing everything..."
                  rm -rf app/develop
              fi
              echo "Cloning repository..."
              git clone --branch develop ${{ secrets.GIT_REPO }} app/develop
          else
              echo "Repository found. Pulling latest changes..."
              cd app/develop

              git reset --hard HEAD
              git clean -fd
              git config --global --add safe.directory ~/novatix/app/develop
              git pull origin develop --force
          fi
          EOT
          chmod +x ~/novatix/setups/update_repo.sh

          # FIXED: install_dependencies.sh - Use npm install instead of npm ci
          echo "Creating install_dependencies.sh..."
          cat > ~/novatix/setups/install_dependencies.sh << 'EOT'
          #!/bin/bash
          set -e
          cd ~/novatix/app/develop

          echo "Installing PHP 8.3 and Composer dependencies..."
          sudo apt update
          sudo apt install software-properties-common -y
          sudo add-apt-repository ppa:ondrej/php -y
          sudo apt update

          echo "Installing required PHP extensions and PHP-FPM..."
          sudo apt install -y php8.3 php8.3-cli php8.3-fpm php8.3-sqlite3 unzip curl git \
          php8.3-dom php8.3-xml php8.3-intl php8.3-curl php8.3-zip php8.3-gd php8.3-mbstring \
          php8.3-redis php8.3-mysql

          echo "Installing Redis server..."
          sudo apt install -y redis-server

          echo "Configuring Redis..."
          sudo systemctl enable redis-server
          sudo systemctl start redis-server

          echo "Installing Composer..."
          if ! command -v composer &> /dev/null; then
              php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
              sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
              rm composer-setup.php
          fi

          echo "Creating Laravel directories and fixing permissions..."
          mkdir -p storage/framework/{cache,sessions,views}
          mkdir -p storage/logs bootstrap/cache

          # Set proper ownership and permissions BEFORE composer install
          sudo chown -R $USER:$USER .
          chmod -R 777 storage bootstrap/cache
          chmod -R 777 storage/logs storage/framework

          echo "Installing Composer dependencies..."
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev

          echo "Installing Node.js and npm..."
          if ! command -v node &> /dev/null; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt install -y nodejs
          fi

          echo "Cleaning npm cache and node_modules..."
          rm -rf node_modules package-lock.json
          npm cache clean --force

          echo "Installing ALL npm dependencies (including devDependencies for build)..."
          npm install --legacy-peer-deps

          echo "Checking TypeScript and Vite availability..."
          if [ -f "node_modules/.bin/tsc" ]; then
              echo "✓ TypeScript compiler found"
          else
              echo "✗ TypeScript compiler not found, installing globally..."
              sudo npm install -g typescript
          fi

          if [ -f "node_modules/.bin/vite" ]; then
              echo "✓ Vite found"
          else
              echo "✗ Vite not found in node_modules"
              ls -la node_modules/.bin/ | grep -E "(vite|tsc)" || echo "No build tools found"
          fi

          echo "Building assets with detailed output..."
          npm run build 2>&1 | tee build.log || {
              echo "Build failed! Here's the detailed log:"
              cat build.log
              echo "Package.json scripts:"
              cat package.json | grep -A 10 -B 2 '"scripts"'
              echo "Node modules bin directory:"
              ls -la node_modules/.bin/ | head -20
              exit 1
          }

          echo "Final permission fix for web server..."
          sudo chown -R www-data:www-data storage bootstrap/cache
          sudo chmod -R 777 storage storage/* bootstrap/cache bootstrap/cache/*

          echo "Build completed successfully!"
          EOT
          chmod +x ~/novatix/setups/install_dependencies.sh

          # setup_worker_services.sh
          echo "Creating setup_worker_services.sh..."
          cat > ~/novatix/setups/setup_worker_services.sh << 'EOT'
          #!/bin/bash
          set -e

          echo "Setting up Laravel worker services with 6 workers..."

          # Create 6 systemd services for queue workers
          for i in {1..6}; do
              echo "Creating queue worker service $i..."
              sudo tee /etc/systemd/system/novatix-queue-worker-$i.service > /dev/null << EOTS
          [Unit]
          Description=NovaTix Laravel Queue Worker $i
          After=network.target redis.service
          Wants=redis.service

          [Service]
          Type=simple
          User=www-data
          Group=www-data
          Restart=always
          RestartSec=10
          StartLimitInterval=300
          StartLimitBurst=5
          WorkingDirectory=/var/www/novatix_staging
          Environment=HOME=/var/www
          Environment=USER=www-data
          ExecStartPre=/bin/bash -c 'cd /var/www/novatix_staging && php artisan config:cache'
          ExecStart=/usr/bin/php artisan queue:work redis --sleep=3 --tries=3 --max-time=3600 --memory=512 --verbose
          StandardOutput=journal
          StandardError=journal
          SyslogIdentifier=novatix-queue-$i

          [Install]
          WantedBy=multi-user.target
          EOTS
          done

          # Create a master service to manage all 6 workers
          echo "Creating master queue worker service..."
          sudo tee /etc/systemd/system/novatix-queue-workers.service > /dev/null << 'EOTS'
          [Unit]
          Description=NovaTix Laravel Queue Workers (All 6)
          After=network.target redis.service
          Wants=redis.service

          [Service]
          Type=oneshot
          RemainAfterExit=yes
          ExecStart=/bin/bash -c 'for i in {1..6}; do systemctl start novatix-queue-worker-$i; done'
          ExecStop=/bin/bash -c 'for i in {1..6}; do systemctl stop novatix-queue-worker-$i; done'

          [Install]
          WantedBy=multi-user.target
          EOTS

          # Set up Laravel scheduler via cron
          echo "Setting up Laravel scheduler via cron..."
          TEMP_CRON=$(mktemp)
          sudo crontab -u www-data -l 2>/dev/null > "$TEMP_CRON" || echo "" > "$TEMP_CRON"

          if ! grep -q "cd /var/www/novatix_staging && php artisan schedule:run" "$TEMP_CRON"; then
              echo "* * * * * cd /var/www/novatix_staging && php artisan schedule:run >> /dev/null 2>&1" >> "$TEMP_CRON"
          fi

          sudo crontab -u www-data "$TEMP_CRON"
          rm "$TEMP_CRON"

          echo "Reloading systemd daemon..."
          sudo systemctl daemon-reload

          echo "Enabling individual queue worker services..."
          for i in {1..6}; do
              sudo systemctl enable novatix-queue-worker-$i
          done

          echo "Enabling master queue workers service..."
          sudo systemctl enable novatix-queue-workers

          echo "Queue worker services setup completed with 6 workers!"
          EOT
          chmod +x ~/novatix/setups/setup_worker_services.sh

          # setup_laravel_environment.sh
          echo "Creating setup_laravel_environment.sh..."
          cat > ~/novatix/setups/setup_laravel_environment.sh << 'EOT'
          #!/bin/bash
          set -e
          cd /var/www/novatix_staging

          echo "=== Setting up Laravel Environment ==="

          # Create .env file if it doesn't exist
          if [ ! -f ".env" ]; then
              echo "Creating .env file from example..."
              cp .env.example .env
              echo "Setting ownership and permissions for .env file..."
              sudo chown www-data:www-data .env || echo "Warning: Could not change .env ownership"
              sudo chmod 644 .env || echo "Warning: Could not change .env permissions"
          fi

          # Generate app key if not set
          if ! grep -q "APP_KEY=base64:" .env 2>/dev/null; then
              echo "Generating Laravel application key..."
              sudo -u www-data php artisan key:generate --force || {
                  echo "Failed to generate key as www-data, trying as current user..."
                  php artisan key:generate --force
                  sudo chown www-data:www-data .env || echo "Warning: Could not change .env ownership after key generation"
              }
          fi

          # Create storage directories
          echo "Creating storage directories..."
          sudo -u www-data mkdir -p storage/framework/{cache,sessions,views} 2>/dev/null || {
              echo "Creating directories as current user first..."
              mkdir -p storage/framework/{cache,sessions,views}
          }
          sudo -u www-data mkdir -p storage/logs 2>/dev/null || mkdir -p storage/logs
          sudo -u www-data mkdir -p bootstrap/cache 2>/dev/null || mkdir -p bootstrap/cache

          # Fix all permissions
          echo "Fixing permissions..."
          echo "Setting ownership to www-data..."
          sudo chown -R www-data:www-data /var/www/novatix_staging || echo "Warning: Could not change all ownership"

          echo "Setting directory permissions..."
          sudo find /var/www/novatix_staging -type d -exec chmod 755 {} \; 2>/dev/null || echo "Warning: Could not set all directory permissions"

          echo "Setting file permissions..."
          sudo find /var/www/novatix_staging -type f -exec chmod 644 {} \; 2>/dev/null || echo "Warning: Could not set all file permissions"

          echo "Setting storage and cache permissions..."
          sudo chmod -R 777 storage bootstrap/cache 2>/dev/null || {
              echo "Fallback: Setting permissions without sudo..."
              chmod -R 777 storage bootstrap/cache 2>/dev/null || echo "Warning: Could not set storage permissions"
          }

          echo "Making artisan executable..."
          sudo chmod +x artisan 2>/dev/null || chmod +x artisan 2>/dev/null || echo "Warning: Could not make artisan executable"

          # Clear all Laravel caches
          echo "Clearing Laravel caches..."
          sudo -u www-data php artisan config:clear || true
          sudo -u www-data php artisan cache:clear || true
          sudo -u www-data php artisan route:clear || true
          sudo -u www-data php artisan view:clear || true

          # Test Laravel environment
          echo "Testing Laravel environment..."
          if sudo -u www-data php artisan --version > /dev/null 2>&1; then
              echo "✓ Laravel environment is working"
              echo "Laravel version: $(sudo -u www-data php artisan --version)"
          else
              echo "✗ Laravel environment test failed"
              echo "Error details:"
              sudo -u www-data php artisan --version 2>&1 || true
              exit 1
          fi

          # Run migrations (create tables if they don't exist)
          echo "Running database migrations..."
          sudo -u www-data php artisan migrate --force || echo "Migration failed, continuing..."

          # Create storage link
          echo "Creating storage link..."
          sudo -u www-data php artisan storage:link || echo "Storage link already exists"

          # Cache configurations for production
          echo "Caching configurations..."
          sudo -u www-data php artisan config:cache
          sudo -u www-data php artisan route:cache
          sudo -u www-data php artisan view:cache

          echo "=== Laravel environment setup completed successfully! ==="
          EOT
          chmod +x ~/novatix/setups/setup_laravel_environment.sh

          # restart_services.sh
          echo "Creating restart_services.sh..."
          cat > ~/novatix/setups/restart_services.sh << 'EOT'
          #!/bin/bash
          set -e

          echo "=== Stopping Laravel queue workers ==="
          # Stop all 6 individual workers
          for i in {1..6}; do
              echo "Stopping queue worker $i..."
              sudo systemctl stop novatix-queue-worker-$i || true
          done

          # Stop the master service
          sudo systemctl stop novatix-queue-workers || true

          echo "=== Resetting service failure counters ==="
          for i in {1..6}; do
              sudo systemctl reset-failed novatix-queue-worker-$i || true
          done
          sudo systemctl reset-failed novatix-queue-workers || true

          echo "=== Restarting PHP-FPM ==="
          sudo systemctl restart php8.3-fpm

          echo "=== Restarting Redis ==="
          sudo systemctl restart redis-server

          echo "=== Waiting for Redis to be ready ==="
          sleep 5

          # Verify Redis is ready
          until sudo systemctl is-active --quiet redis-server && redis-cli ping > /dev/null 2>&1; do
              echo "Waiting for Redis to start and respond..."
              sleep 2
          done
          echo "✓ Redis is ready"

          echo "=== Testing Laravel environment ==="
          cd /var/www/novatix_staging

          # More detailed Laravel environment test
          if [ ! -f "artisan" ]; then
              echo "ERROR: artisan file not found in /var/www/novatix_staging"
              exit 1
          fi

          if [ ! -f ".env" ]; then
              echo "ERROR: .env file not found"
              exit 1
          fi

          # Test with better error reporting
          if sudo -u www-data php artisan --version > /dev/null 2>&1; then
              echo "✓ Laravel environment is working"
              echo "Laravel version: $(sudo -u www-data php artisan --version)"
          else
              echo "ERROR: Laravel environment is not working properly"
              echo "=== Debugging Information ==="
              echo "Current directory: $(pwd)"
              echo "Directory contents:"
              ls -la
              echo "PHP version: $(php -v | head -n 1)"
              echo "www-data user test:"
              sudo -u www-data whoami
              echo "Artisan file permissions:"
              ls -la artisan
              echo "Error details:"
              sudo -u www-data php artisan --version 2>&1 || true
              echo "=== End Debugging ==="
              exit 1
          fi

          echo "=== Starting Laravel queue workers ==="
          # Start all workers using the master service
          sudo systemctl start novatix-queue-workers
          sleep 10

          echo "=== Final service status check ==="
          echo "Redis status:"
          sudo systemctl status redis-server --no-pager -l || true

          echo "Master queue workers status:"
          sudo systemctl status novatix-queue-workers --no-pager -l || true

          echo "Individual worker statuses:"
          for i in {1..6}; do
              echo "Worker $i status:"
              sudo systemctl status novatix-queue-worker-$i --no-pager -l || true
              echo "---"
          done

          echo "=== Checking if queue workers are actually running ==="
          FAILED_WORKERS=0
          for i in {1..6}; do
              if ! sudo systemctl is-active --quiet novatix-queue-worker-$i; then
                  echo "WARNING: Queue worker $i failed to start"
                  sudo journalctl -u novatix-queue-worker-$i --no-pager -n 10
                  FAILED_WORKERS=$((FAILED_WORKERS + 1))
              else
                  echo "✓ Queue worker $i is running"
              fi
          done

          if [ $FAILED_WORKERS -gt 0 ]; then
              echo "WARNING: $FAILED_WORKERS out of 6 queue workers failed to start"
              echo "Continuing deployment with $(( 6 - FAILED_WORKERS )) working queue workers..."
          else
              echo "✓ All 6 queue workers are running successfully"
          fi

          echo "=== Laravel Scheduler Status ==="
          echo "Cron jobs for www-data user:"
          sudo crontab -u www-data -l || echo "No cron jobs found"

          echo "=== Deployment completed successfully! ==="
          EOT
          chmod +x ~/novatix/setups/restart_services.sh

          # NEW: TypeScript debugging script
          echo "Creating debug_typescript.sh..."
          cat > ~/novatix/setups/debug_typescript.sh << 'EOT'
          #!/bin/bash
          cd /var/www/novatix_staging
          echo "=== TypeScript Build Debug ==="
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo ""

          echo "=== Package.json scripts ==="
          cat package.json | grep -A 10 -B 2 '"scripts"' || echo "No scripts found"
          echo ""

          echo "=== Available build tools ==="
          ls -la node_modules/.bin/ | grep -E "(vite|tsc|tsx)" || echo "No build tools found"
          echo ""

          echo "=== TypeScript config ==="
          if [ -f "tsconfig.json" ]; then
              echo "✓ tsconfig.json exists"
              head -20 tsconfig.json
          else
              echo "✗ tsconfig.json not found"
          fi
          echo ""

          echo "=== Vite config ==="
          if [ -f "vite.config.js" ] || [ -f "vite.config.ts" ]; then
              echo "✓ Vite config exists"
              ls -la vite.config.*
          else
              echo "✗ Vite config not found"
          fi
          echo ""

          echo "=== Installed packages (key ones) ==="
          npm list --depth=0 | grep -E "(react|inertia|headless|typescript|vite)" || echo "Key packages not found"
          echo ""

          echo "=== Build attempt with verbose output ==="
          npm run build 2>&1 | head -50 || echo "Build failed"
          EOT
          chmod +x ~/novatix/setups/debug_typescript.sh

          # Utility scripts for debugging
          cat > ~/novatix/setups/debug_laravel.sh << 'EOT'
          #!/bin/bash
          echo "=== Laravel Debug Information ==="
          cd /var/www/novatix_staging

          echo "Current directory: $(pwd)"
          echo "PHP version: $(php -v | head -n 1)"
          echo "Composer version: $(composer --version 2>/dev/null || echo 'Composer not found')"
          echo ""

          echo "=== File Structure Check ==="
          echo "Artisan exists: $([ -f artisan ] && echo 'Yes' || echo 'No')"
          echo ".env exists: $([ -f .env ] && echo 'Yes' || echo 'No')"
          echo "vendor directory exists: $([ -d vendor ] && echo 'Yes' || echo 'No')"
          echo ""

          echo "=== Permissions Check ==="
          echo "Directory owner: $(ls -ld . | awk '{print $3":"$4}')"
          echo "Artisan permissions: $(ls -l artisan 2>/dev/null || echo 'artisan not found')"
          echo ""

          echo "=== Laravel Environment Test ==="
          if sudo -u www-data php artisan --version 2>/dev/null; then
              echo "✓ Laravel is working as www-data user"
          else
              echo "✗ Laravel failed as www-data user"
              echo "Error:"
              sudo -u www-data php artisan --version 2>&1 || true
          fi
          EOT
          chmod +x ~/novatix/setups/debug_laravel.sh

          cat > ~/novatix/setups/check_workers.sh << 'EOT'
          #!/bin/bash
          echo "=== Laravel Workers Status (6 Workers) ==="

          echo "Master Queue Workers Service Status:"
          sudo systemctl status novatix-queue-workers --no-pager -l || true
          echo ""

          echo "Individual Queue Worker Statuses:"
          for i in {1..6}; do
              echo "=== Worker $i Status ==="
              if sudo systemctl is-active --quiet novatix-queue-worker-$i; then
                  echo "✓ Worker $i is ACTIVE"
              else
                  echo "✗ Worker $i is INACTIVE"
              fi
              sudo systemctl status novatix-queue-worker-$i --no-pager -l || true
              echo ""
          done

          echo "=== Redis Status ==="
          sudo systemctl status redis-server --no-pager -l || true
          echo ""

          echo "=== Recent logs from all queue workers ==="
          for i in {1..6}; do
              echo "--- Worker $i Recent Logs ---"
              sudo journalctl -u novatix-queue-worker-$i --no-pager -n 5 --since "5 minutes ago" || true
          done

          echo ""
          echo "=== Queue Worker Process Summary ==="
          echo "Active queue worker processes:"
          ps aux | grep "queue:work" | grep -v grep || echo "No queue worker processes found"

          echo ""
          echo "=== Redis Connection Test ==="
          if redis-cli ping > /dev/null 2>&1; then
              echo "✓ Redis is responding to ping"
              echo "Redis info:"
              redis-cli info server | head -5
          else
              echo "✗ Redis is not responding"
          fi

          echo ""
          echo "=== Summary ==="
          ACTIVE_WORKERS=0
          for i in {1..6}; do
              if sudo systemctl is-active --quiet novatix-queue-worker-$i; then
                  ACTIVE_WORKERS=$((ACTIVE_WORKERS + 1))
              fi
          done

          echo "Active workers: $ACTIVE_WORKERS/6"
          if [ $ACTIVE_WORKERS -eq 6 ]; then
              echo "✓ All queue workers are running perfectly!"
          elif [ $ACTIVE_WORKERS -gt 0 ]; then
              echo "⚠ Some queue workers are running ($ACTIVE_WORKERS/6)"
          else
              echo "✗ No queue workers are running"
          fi
          EOT
          chmod +x ~/novatix/setups/check_workers.sh

          # NEW: Permission diagnostic and fix script
          cat > ~/novatix/setups/fix_permissions.sh << 'EOT'
          #!/bin/bash
          echo "=== Permission Diagnostic and Fix Script ==="
          cd /var/www/novatix_staging

          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Directory exists: $([ -d /var/www/novatix_staging ] && echo 'Yes' || echo 'No')"
          echo ""

          echo "=== Current Ownership and Permissions ==="
          echo "Project directory:"
          ls -la /var/www/ | grep novatix || echo "No novatix directory found"
          echo ""
          echo "Key files:"
          ls -la .env 2>/dev/null || echo ".env file not found"
          ls -la artisan 2>/dev/null || echo "artisan file not found"
          echo ""
          echo "Storage directory:"
          ls -la storage/ 2>/dev/null || echo "storage directory not found"
          echo ""

          echo "=== Attempting to fix permissions ==="

          # Method 1: Try with sudo
          echo "Trying to set ownership with sudo..."
          if sudo chown -R www-data:www-data /var/www/novatix_staging 2>/dev/null; then
              echo "✓ Successfully set ownership to www-data"
          else
              echo "✗ Could not set ownership to www-data"

              # Method 2: Try with current user
              echo "Trying to set ownership to current user..."
              CURRENT_USER=$(whoami)
              if sudo chown -R $CURRENT_USER:$CURRENT_USER /var/www/novatix_staging 2>/dev/null; then
                  echo "✓ Successfully set ownership to $CURRENT_USER"
              else
                  echo "✗ Could not change ownership at all"
              fi
          fi

          # Set directory permissions
          echo "Setting directory permissions..."
          find /var/www/novatix_staging -type d -exec chmod 755 {} \; 2>/dev/null || echo "Warning: Could not set directory permissions"

          # Set file permissions
          echo "Setting file permissions..."
          find /var/www/novatix_staging -type f -exec chmod 644 {} \; 2>/dev/null || echo "Warning: Could not set file permissions"

          # Special permissions for Laravel
          echo "Setting Laravel-specific permissions..."
          chmod -R 777 storage bootstrap/cache 2>/dev/null || echo "Warning: Could not set storage/cache permissions"
          chmod +x artisan 2>/dev/null || echo "Warning: Could not make artisan executable"

          # Create .env if missing
          if [ ! -f ".env" ]; then
              echo "Creating .env file..."
              cp .env.example .env 2>/dev/null && echo "✓ .env created" || echo "✗ Could not create .env"
          fi

          echo ""
          echo "=== Final Status Check ==="
          echo ".env exists: $([ -f .env ] && echo 'Yes' || echo 'No')"
          echo "artisan executable: $([ -x artisan ] && echo 'Yes' || echo 'No')"
          echo "storage writable: $([ -w storage ] && echo 'Yes' || echo 'No')"

          echo ""
          echo "=== Laravel Test ==="
          if php artisan --version >/dev/null 2>&1; then
              echo "✓ Laravel works with current user"
              php artisan --version
          else
              echo "✗ Laravel doesn't work with current user"
          fi

          if sudo -u www-data php artisan --version >/dev/null 2>&1; then
              echo "✓ Laravel works with www-data user"
          else
              echo "✗ Laravel doesn't work with www-data user"
          fi
          EOT
          chmod +x ~/novatix/setups/fix_permissions.sh

          EOF

      - name: Update Repository on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/update_repo.sh"

      - name: Install Dependencies on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/install_dependencies.sh"

      - name: Setup Worker Services
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/setup_worker_services.sh"

      - name: Link Staging Directory
        run: |
          ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'bash -s' << 'EOF'
          echo "Linking staging directory..."
          sudo rm -rf /var/www/novatix_staging
          sudo ln -s ~/novatix/app/develop /var/www/novatix_staging

          echo "Checking symbolic link..."
          if [ -L "/var/www/novatix_staging" ]; then
              echo "✓ Symbolic link created successfully"
              echo "Link target: $(readlink -f /var/www/novatix_staging)"
          else
              echo "✗ Failed to create symbolic link"
              exit 1
          fi
          EOF

      - name: Fix Permissions Before Laravel Setup
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/fix_permissions.sh"

      - name: Setup Laravel Environment
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/setup_laravel_environment.sh"

      - name: Debug TypeScript Build Issues
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/debug_typescript.sh"

      - name: Debug Laravel Before Service Restart
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/debug_laravel.sh"

      - name: Restart PHP-FPM and Nginx
        run: |
          ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            sudo systemctl restart php8.3-fpm
            sudo systemctl reload nginx || sudo systemctl restart nginx
          EOF

      - name: Restart Services on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/restart_services.sh"

      - name: Final Status Check
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/check_workers.sh"

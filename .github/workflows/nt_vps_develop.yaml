name: NovaTix VPS Develop

# This workflow is designed to deploy the NovaTix application to a VPS server.
on:
  push:
    branches:
      - develop

jobs:
  test-build:
    runs-on: ubuntu-latest
    steps:
      - name: 🛠 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: 📦 Install Frontend Dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install --legacy-peer-deps

      - name: 🏗 Build Frontend (Vite)
        run: npm run build

  test-laravel:
    runs-on: ubuntu-latest
    needs: test-build
    steps:
      - name: 🛠 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: mbstring, bcmath, xml, pdo_mysql, pdo_sqlite
          tools: composer, phpunit

      - name: 📦 Install Backend Dependencies
        run: composer install --optimize-autoloader --no-interaction --no-scripts --ignore-platform-reqs

      - name: 🛠 Set Up Laravel Environment
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build frontend assets with Vite
        run: npm run build

      - name: Start Laravel built-in server
        run: php artisan serve --host=127.0.0.1 --port=8000 &

      - name: 🛠 Run Laravel Tests
        run: php artisan test

  vps-sync:
    runs-on: ubuntu-latest
    needs: test-laravel

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/av_rsa
          chmod 600 ~/.ssh/av_rsa
          ssh-keyscan -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts

      - name: Ensure Folder Structure & Create Scripts
        run: |
          ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'bash -s' << 'EOF'
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          set -e

          echo "Ensuring folder structure..."
          mkdir -p ~/novatix/app/develop ~/novatix/setups

          # update_repo.sh
          echo "Creating update_repo.sh..."
          cat > ~/novatix/setups/update_repo.sh << 'EOT'
          #!/bin/bash
          mkdir -p ~/novatix/app/develop
          cd ~/novatix

          if [ ! -d "app/develop/.git" ]; then
              echo "Repository not found. Checking existing directory..."
              if [ -n "$(ls -A app 2>/dev/null)" ]; then
                  echo "Existing directory found but not a Git repository. Removing everything..."
                  rm -rf app/develop
              fi
              echo "Cloning repository..."
              git clone --branch develop ${{ secrets.GIT_REPO }} app/develop
          else
              echo "Repository found. Pulling latest changes..."
              cd app/develop

              git reset --hard HEAD
              git clean -fd
              git config --global --add safe.directory ~/novatix/app/develop
              git pull origin develop --force
          fi
          EOT
          chmod +x ~/novatix/setups/update_repo.sh

          # install_dependencies.sh
          echo "Creating install_dependencies.sh..."
          cat > ~/novatix/setups/install_dependencies.sh << 'EOT'
          #!/bin/bash
          set -e
          cd ~/novatix/app/develop

          echo "Installing PHP 8.3 and Composer dependencies..."
          sudo apt update
          sudo apt install software-properties-common -y
          sudo add-apt-repository ppa:ondrej/php -y
          sudo apt update

          echo "Installing required PHP extensions and PHP-FPM..."
          sudo apt install -y php8.3 php8.3-cli php8.3-fpm php8.3-sqlite3 unzip curl git \
          php8.3-dom php8.3-xml php8.3-intl php8.3-curl php8.3-zip php8.3-gd php8.3-mbstring \
          php8.3-redis

          echo "Installing Redis server..."
          sudo apt install -y redis-server

          echo "Configuring Redis..."
          sudo systemctl enable redis-server
          sudo systemctl start redis-server

          echo "Installing Composer..."
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
          rm composer-setup.php

          composer install --no-interaction --prefer-dist --optimize-autoloader
          # Laravel setup
          # If env not exist
          if [ ! -f .env ]; then
              echo "Creating .env file..."
              cp .env.example .env
              php artisan key:generate
          fi

          echo "Installing Node.js and npm..."
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt install -y nodejs

          echo "Installing npm dependencies and building assets..."
          npm install
          npm run build

          echo "Fixing Laravel directory permissions..."
          mkdir -p storage/framework/{cache,sessions,views}
          mkdir -p storage/logs bootstrap/cache

          sudo chown -R www-data:www-data storage bootstrap/cache
          sudo chmod -R 777 storage storage/* bootstrap/cache bootstrap/cache/*

          EOT
          chmod +x ~/novatix/setups/install_dependencies.sh

          # setup_worker_services.sh
          echo "Creating setup_worker_services.sh..."
          cat > ~/novatix/setups/setup_worker_services.sh << 'EOT'
          #!/bin/bash
          set -e

          echo "Setting up Laravel worker services..."

          # Create systemd service for queue worker
          sudo tee /etc/systemd/system/novatix-queue-worker.service > /dev/null << 'EOTS'
          [Unit]
          Description=NovaTix Laravel Queue Worker
          After=network.target redis.service
          Wants=redis.service

          [Service]
          Type=simple
          User=www-data
          Group=www-data
          Restart=always
          RestartSec=10
          StartLimitInterval=300
          StartLimitBurst=5
          WorkingDirectory=/var/www/novatix_staging
          Environment=HOME=/var/www
          Environment=USER=www-data
          ExecStartPre=/bin/bash -c 'cd /var/www/novatix_staging && php artisan config:cache'
          ExecStart=/usr/bin/php artisan queue:work redis --sleep=3 --tries=3 --max-time=3600 --memory=512 --verbose
          StandardOutput=journal
          StandardError=journal
          SyslogIdentifier=novatix-queue

          [Install]
          WantedBy=multi-user.target
          EOTS

          # Create systemd service for event adjustment worker
          sudo tee /etc/systemd/system/novatix-event-adjust.service > /dev/null << 'EOTS'
          [Unit]
          Description=NovaTix Event Adjust Users Worker
          After=network.target redis.service
          Wants=redis.service

          [Service]
          Type=simple
          User=www-data
          Group=www-data
          Restart=always
          RestartSec=15
          StartLimitInterval=300
          StartLimitBurst=5
          WorkingDirectory=/var/www/novatix_staging
          Environment=HOME=/var/www
          Environment=USER=www-data
          ExecStartPre=/bin/bash -c 'cd /var/www/novatix_staging && php artisan config:cache'
          ExecStart=/usr/bin/php artisan event:adjust-users --continuous
          StandardOutput=journal
          StandardError=journal
          SyslogIdentifier=novatix-event-adjust

          [Install]
          WantedBy=multi-user.target
          EOTS

          echo "Reloading systemd daemon..."
          sudo systemctl daemon-reload

          echo "Enabling services..."
          sudo systemctl enable novatix-queue-worker
          sudo systemctl enable novatix-event-adjust
          EOT
          chmod +x ~/novatix/setups/setup_worker_services.sh

          # deploy_laravel.sh
          echo "Creating deploy_laravel.sh..."
          cat > ~/novatix/setups/deploy_laravel.sh << 'EOT'
          #!/bin/bash
          cd ~/novatix/app/develop
          sudo php artisan config:clear
          sudo php artisan cache:clear
          sudo php artisan route:cache
          EOT
          chmod +x ~/novatix/setups/deploy_laravel.sh

          # restart_services.sh
          echo "Creating restart_services.sh..."
          cat > ~/novatix/setups/restart_services.sh << 'EOT'
          #!/bin/bash
          set -e

          echo "Stopping Laravel workers..."
          sudo systemctl stop novatix-queue-worker || true
          sudo systemctl stop novatix-event-adjust || true

          echo "Resetting service failure counters..."
          sudo systemctl reset-failed novatix-queue-worker || true
          sudo systemctl reset-failed novatix-event-adjust || true

          echo "Restarting PHP-FPM..."
          sudo systemctl restart php8.3-fpm

          echo "Restarting Redis..."
          sudo systemctl restart redis-server

          echo "Waiting for Redis to be ready..."
          sleep 5

          # Verify Redis is actually ready
          until sudo systemctl is-active --quiet redis-server; do
              echo "Waiting for Redis to start..."
              sleep 2
          done

          echo "Starting Laravel workers..."
          sudo systemctl start novatix-queue-worker
          sleep 3
          sudo systemctl start novatix-event-adjust

          echo "Waiting for services to stabilize..."
          sleep 10

          echo "Final service status check..."
          sudo systemctl status redis-server --no-pager -l
          sudo systemctl status novatix-queue-worker --no-pager -l
          sudo systemctl status novatix-event-adjust --no-pager -l

          # Check if services are actually running
          if ! sudo systemctl is-active --quiet novatix-queue-worker; then
              echo "ERROR: Queue worker failed to start"
              sudo journalctl -u novatix-queue-worker --no-pager -n 20
              exit 1
          fi

          if ! sudo systemctl is-active --quiet novatix-event-adjust; then
              echo "ERROR: Event adjust worker failed to start"
              sudo journalctl -u novatix-event-adjust --no-pager -n 20
              exit 1
          fi

          echo "All services started successfully!"
          EOT
          chmod +x ~/novatix/setups/restart_services.sh

          # stop_workers.sh
          echo "Creating stop_workers.sh..."
          cat > ~/novatix/setups/stop_workers.sh << 'EOT'
          #!/bin/bash
          echo "Stopping Laravel workers..."
          sudo systemctl stop novatix-queue-worker
          sudo systemctl stop novatix-event-adjust
          EOT
          chmod +x ~/novatix/setups/stop_workers.sh

          # start_workers.sh
          echo "Creating start_workers.sh..."
          cat > ~/novatix/setups/start_workers.sh << 'EOT'
          #!/bin/bash
          echo "Starting Laravel workers..."
          sudo systemctl start novatix-queue-worker
          sudo systemctl start novatix-event-adjust
          EOT
          chmod +x ~/novatix/setups/start_workers.sh

          # FIXED: debug_workers.sh - Remove the hanging manual tests
          cat > ~/novatix/setups/debug_workers.sh << 'EOT'
          #!/bin/bash
          echo "=== Quick Debug Laravel Workers ==="
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Timestamp: $(date)"
          echo ""

          echo "=== Environment Check ==="
          echo "Checking if staging directory exists..."
          if [ -d "/var/www/novatix_staging" ]; then
              echo "✓ Staging directory exists"
              ls -la /var/www/novatix_staging/ | head -5
          else
              echo "✗ Staging directory missing"
              exit 1
          fi
          echo ""

          echo "=== Laravel Environment Check ==="
          cd /var/www/novatix_staging
          echo "Working directory: $(pwd)"
          echo "PHP version: $(php -v | head -n 1)"
          echo ""

          echo "=== .env File Check ==="
          if [ -f ".env" ]; then
              echo "✓ .env file exists"
              echo "Environment: $(grep APP_ENV .env 2>/dev/null || echo 'APP_ENV not set')"
              echo "Database: $(grep DB_CONNECTION .env 2>/dev/null || echo 'DB_CONNECTION not set')"
              echo "Redis: $(grep REDIS_HOST .env 2>/dev/null || echo 'REDIS_HOST not set')"
          else
              echo "✗ .env file missing"
          fi
          echo ""

          echo "=== Quick Connection Tests ==="
          echo "Testing Redis connection..."
          if redis-cli ping > /dev/null 2>&1; then
              echo "✓ Redis is responding"
          else
              echo "✗ Redis connection failed"
          fi

          echo "Testing Laravel boot..."
          if sudo -u www-data php artisan --version > /dev/null 2>&1; then
              echo "✓ Laravel boots successfully"
          else
              echo "✗ Laravel boot failed"
          fi

          echo "=== Available Commands ==="
          sudo -u www-data php artisan list | grep -E "(queue|event)" | head -5 || echo "Commands check failed"
          echo ""

          echo "Debug completed (no hanging tests)!"
          EOT
          chmod +x ~/novatix/setups/debug_workers.sh

          # Create validate_environment.sh
          cat > ~/novatix/setups/validate_environment.sh << 'EOT'
          #!/bin/bash
          echo "=== Laravel Environment Validation ==="
          cd /var/www/novatix_staging

          # Check current user and permissions
          echo "Current user: $(whoami)"
          echo "Directory owner: $(ls -ld /var/www/novatix_staging | awk '{print $3":"$4}')"

          # Verify .env file
          if [ ! -f ".env" ]; then
              echo "Creating .env file..."
              cp .env.example .env
              sudo chown www-data:www-data .env
              sudo -u www-data php artisan key:generate
          fi

          # Test basic Laravel functionality
          echo "Testing Laravel boot..."
          sudo -u www-data php artisan --version

          # Clear all caches first
          echo "Clearing all caches..."
          sudo -u www-data php artisan config:clear
          sudo -u www-data php artisan cache:clear
          sudo -u www-data php artisan route:clear
          sudo -u www-data php artisan view:clear

          # Test database connection
          echo "Testing database connection..."
          if sudo -u www-data php artisan migrate:status > /dev/null 2>&1; then
              echo "✓ Database connection successful"
          else
              echo "✗ Database connection failed - running migrations..."
              sudo -u www-data php artisan migrate --force
          fi

          # Quick Redis test
          echo "Testing Redis connection..."
          if redis-cli ping > /dev/null 2>&1; then
              echo "✓ Redis connection successful"
          else
              echo "✗ Redis connection failed"
              exit 1
          fi

          # Cache configuration after tests pass
          echo "Caching configuration..."
          sudo -u www-data php artisan config:cache

          echo "Environment validation completed successfully!"
          EOT
          chmod +x ~/novatix/setups/validate_environment.sh

          # fix_permissions.sh
          echo "Creating fix_permissions.sh..."
          cat > ~/novatix/setups/fix_permissions.sh << 'EOT'
          #!/bin/bash
          echo "Fixing permissions for Laravel application..."
          cd /var/www/novatix_staging

          # Fix ownership
          sudo chown -R www-data:www-data /var/www/novatix_staging

          # Fix directory permissions
          sudo find /var/www/novatix_staging -type d -exec chmod 755 {} \;
          sudo find /var/www/novatix_staging -type f -exec chmod 644 {} \;

          # Fix specific Laravel directories
          sudo chmod -R 777 storage bootstrap/cache
          sudo chmod +x artisan

          # Create necessary directories if they don't exist
          sudo -u www-data mkdir -p storage/framework/{cache,sessions,views}
          sudo -u www-data mkdir -p storage/logs
          sudo -u www-data mkdir -p bootstrap/cache

          echo "Permissions fixed!"
          EOT
          chmod +x ~/novatix/setups/fix_permissions.sh

          # check_workers.sh
          echo "Creating check_workers.sh..."
          cat > ~/novatix/setups/check_workers.sh << 'EOT'
          #!/bin/bash
          echo "Checking Laravel workers status..."
          echo "=================================="
          echo "Queue Worker Status:"
          sudo systemctl status novatix-queue-worker --no-pager -l
          echo ""
          echo "Event Adjust Worker Status:"
          sudo systemctl status novatix-event-adjust --no-pager -l
          echo ""
          echo "Redis Status:"
          sudo systemctl status redis-server --no-pager -l
          echo ""
          echo "Recent logs from queue worker:"
          sudo journalctl -u novatix-queue-worker --no-pager -n 10
          echo ""
          echo "Recent logs from event adjust worker:"
          sudo journalctl -u novatix-event-adjust --no-pager -n 10
          EOT
          chmod +x ~/novatix/setups/check_workers.sh

          EOF

      - name: Update Repository on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/update_repo.sh"

      - name: Install Dependencies on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/install_dependencies.sh"

      - name: Setup Worker Services
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/setup_worker_services.sh"

      - name: Restart PHP-FPM and reload Nginx
        run: |
          ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            sudo systemctl restart php8.3-fpm
            sudo systemctl reload nginx
          EOF

      - name: Deploy Laravel on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/deploy_laravel.sh"

      - name: Link Staging Directory
        run: |
          ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'bash -s' << 'EOF'
          ssh-keyscan github.com >> ~/.ssh/known_hosts

          sudo rm -rf /var/www/novatix_staging
          sudo ln -s ~/novatix/app/develop /var/www/novatix_staging
          sudo chown -R www-data:www-data /var/www/novatix_staging
          cd /var/www/novatix_staging

          php artisan config:clear
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          php artisan migrate
          php artisan storage:link
          EOF

      - name: Fix Permissions and Quick Debug
        run: |
          ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            ~/novatix/setups/fix_permissions.sh
            ~/novatix/setups/debug_workers.sh
          EOF

      - name: Validate Environment Before Starting Services
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/validate_environment.sh"

      - name: Restart Services on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/restart_services.sh"

      - name: Final Check Worker Status
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/check_workers.sh"

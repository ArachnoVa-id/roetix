name: NovaTix VPS Production

on:
  push:
    branches:
      - main

jobs:
  vps-sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/av_rsa
          chmod 600 ~/.ssh/av_rsa
          ssh-keyscan -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts

      - name: Ensure Folder Structure & Create Scripts
        run: |
          ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'bash -s' << 'EOF'
          set -e

          echo "Ensuring folder structure..."
          mkdir -p ~/novatix/app/production

          # Ensure update_repo_prod.sh exists
          echo "Creating update_repo_prod.sh..."
          cat > ~/novatix/setups/update_repo_prod.sh << 'EOT'
          #!/bin/bash
          mkdir -p ~/novatix/app/production
          cd ~/novatix

          if [ ! -d "app/production/.git" ]; then
              echo "Repository not found. Checking existing directory..."
              if [ -n "$(ls -A app 2>/dev/null)" ]; then
                  echo "Existing directory found but not a Git repository. Removing everything..."
                  rm -rf app/production
              fi
              echo "Cloning repository..."
              git clone --branch main git@github.com:ArachnoVa-id/novatix.git app/production
          else
              echo "Repository found. Pulling latest changes..."
              cd app/production

              git reset --hard HEAD
              git clean -fd

              # Enable pulling by marking as safe
              git config --global --add safe.directory ~/novatix/app/production

              git pull origin main --force
          fi

          EOT
          chmod +x ~/novatix/setups/update_repo_prod.sh

          # Create generate_env_prod.sh script
          echo "Creating generate_env_prod.sh..."
          cat > "$HOME/novatix/setups/generate_env_prod.sh" <<EOT
          #!/bin/bash

          export ENV_DIR="$HOME/novatix/app/production"
          PROD_ENV_FILE="\$ENV_DIR/.env.production"
          TARGET_ENV_FILE="\$ENV_DIR/.env"

          echo "Checking if .env.production exists..."
          if [ ! -f "\$PROD_ENV_FILE" ]; then
              echo "Error: .env.production file not found!"
              exit 1
          fi

          echo "Backing up existing .env file (if exists)..."
          if [ -f "\$TARGET_ENV_FILE" ]; then
              mv "\$TARGET_ENV_FILE" "\$TARGET_ENV_FILE.bak"
          fi

          echo "Copying .env.production to .env..."
          cp "\$PROD_ENV_FILE" "\$TARGET_ENV_FILE"

          chmod 660 "\$TARGET_ENV_FILE"
          echo ".env file copied successfully from .env.production."
          EOT

          # Make the script executable
          chmod +x "$HOME/novatix/setups/generate_env_prod.sh"
          echo "generate_env_prod.sh created and made executable."

      - name: Update Repository on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/update_repo_prod.sh"

      - name: Generate .env on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/generate_env_prod.sh"

      - name: Install Dependencies on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/install_dependencies.sh"

      - name: Deploy Laravel on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/deploy_laravel.sh"

      - name: Restart Services on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/restart_services.sh"

  update-production:
    runs-on: ubuntu-latest
    needs: vps-sync

    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/av_rsa
          chmod 600 ~/.ssh/av_rsa
          ssh-keyscan -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy Laravel Project to VPS
        run: |
          ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'bash -s' << 'EOF'
          set -e  # Exit immediately if any command fails

          # Ensure project directory exists
          sudo mkdir -p ~/novatix/app/production

          # Change permissions to allow www-data
          sudo chown -R www-data:www-data ~/novatix/app/production

          # Remove old symlink if exists, then create a new one
          sudo rm -rf /var/www/novatix
          sudo ln -s ~/novatix/app/production /var/www/novatix

          # Set proper ownership
          sudo chown -R www-data:www-data /var/www/novatix

          # Move into project directory
          cd /var/www/novatix

          # Install backend dependencies
          composer install --no-interaction --prefer-dist --optimize-autoloader

          # Install frontend dependencies
          npm install

          # Build frontend assets
          npm run build

          # Set correct permissions
          sudo chown -R www-data:www-data /var/www/novatix
          sudo chmod -R 775 /var/www/novatix/storage /var/www/novatix/bootstrap/cache

          # Cache configurations
          php artisan config:clear
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

          # Run database migrations
          php artisan migrate --force
          EOF

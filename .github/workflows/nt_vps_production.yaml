name: NovaTix VPS production

on:
  push:
    branches:
      - main

jobs:
  vps-sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/av_rsa
          chmod 600 ~/.ssh/av_rsa
          ssh-keyscan -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts

      - name: Ensure Folder Structure & Create Scripts
        run: |
          ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'bash -s' << 'EOF'
          set -e

          echo "Ensuring folder structure..."
          mkdir -p ~/novatix/app/production

          # Ensure update_repo_prod.sh exists
          echo "Creating update_repo_prod.sh..."
          cat > ~/novatix/setups/update_repo_prod.sh << 'EOT'
          #!/bin/bash
          mkdir -p ~/novatix/app/production
          cd ~/novatix

          if [ ! -d "app/production/.git" ]; then
              echo "Repository not found. Checking existing directory..."
              if [ -n "$(ls -A app 2>/dev/null)" ]; then
                  echo "Existing directory found but not a Git repository. Removing everything..."
                  rm -rf app/production
              fi
              echo "Cloning repository..."
              git clone git@github.com:ArachnoVa-id/novatix.git app/production
          else
              echo "Repository found. Pulling latest changes..."
              cd app/production
              git pull origin production
          fi
          ls -la  # Debugging: Show contents
          EOT
          chmod +x ~/novatix/setups/update_repo_prod.sh

          # Ensure generate_env_prod.sh exists
          echo "Creating generate_env_prod.sh..."
          cat > ~/novatix/app/production/generate_env_prod.sh << 'EOT'
          #!/bin/bash

          ENV_FILE="$HOME/novatix/app/production/.env"

          echo "Checking .env file..."
          if [ ! -f "$ENV_FILE" ]; then
              echo "Generating .env file..."

              cat > "$ENV_FILE" <<"EOT_ENV"
          APP_NAME=${{ vars.APP_NAME }}
          APP_ENV=${{ vars.APP_ENV }}
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=${{ vars.APP_DEBUG }}
          APP_TIMEZONE=${{ vars.APP_TIMEZONE }}
          APP_URL=${{ secrets.APP_URL }}

          APP_LOCALE=${{ vars.APP_LOCALE }}
          APP_FALLBACK_LOCALE=${{ vars.APP_FALLBACK_LOCALE }}
          APP_FAKER_LOCALE=${{ vars.APP_FAKER_LOCALE }}

          APP_MAINTENANCE_DRIVER=${{ vars.APP_MAINTENANCE_DRIVER }}
          PHP_CLI_SERVER_WORKERS=${{ vars.PHP_CLI_SERVER_WORKERS }}

          BCRYPT_ROUNDS=${{ vars.BCRYPT_ROUNDS }}

          LOG_CHANNEL=${{ vars.LOG_CHANNEL }}
          LOG_STACK=${{ vars.LOG_STACK }}
          LOG_DEPRECATIONS_CHANNEL=${{ vars.LOG_DEPRECATIONS_CHANNEL }}
          LOG_LEVEL=${{ vars.LOG_LEVEL }}

          DB_CONNECTION=${{ vars.DB_CONNECTION }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          SESSION_DRIVER=${{ vars.SESSION_DRIVER }}
          SESSION_LIFETIME=${{ vars.SESSION_LIFETIME }}
          SESSION_ENCRYPT=${{ vars.SESSION_ENCRYPT }}
          SESSION_PATH=${{ vars.SESSION_PATH }}
          SESSION_DOMAIN=${{ vars.SESSION_DOMAIN }}

          BROADCAST_CONNECTION=${{ vars.BROADCAST_CONNECTION }}
          FILESYSTEM_DISK=${{ vars.FILESYSTEM_DISK }}
          QUEUE_CONNECTION=${{ vars.QUEUE_CONNECTION }}

          CACHE_STORE=${{ vars.CACHE_STORE }}
          CACHE_PREFIX=${{ vars.CACHE_PREFIX }}

          MEMCACHED_HOST=${{ vars.MEMCACHED_HOST }}

          REDIS_CLIENT=${{ vars.REDIS_CLIENT }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}

          MAIL_MAILER=${{ vars.MAIL_MAILER }}
          MAIL_SCHEME=${{ vars.MAIL_SCHEME }}
          MAIL_HOST=${{ secrets.MAIL_HOST }}
          MAIL_PORT=${{ secrets.MAIL_PORT }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}
          MAIL_FROM_NAME=${{ vars.APP_NAME }}

          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION=${{ vars.AWS_DEFAULT_REGION }}
          AWS_BUCKET=${{ secrets.AWS_BUCKET }}
          AWS_USE_PATH_STYLE_ENDPOINT=${{ vars.AWS_USE_PATH_STYLE_ENDPOINT }}

          VITE_APP_NAME=${{ vars.APP_NAME }}
          EOT_ENV

              chmod 660 "$ENV_FILE"
              echo ".env file generated successfully."
          else
              echo ".env file already exists. Skipping generation."
          fi
          EOT

          chmod +x ~/novatix/app/production/generate_env_prod.sh

      - name: Update Repository on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/update_repo_prod.sh"

      - name: Generate .env on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/generate_env_prod.sh"

      - name: Install Dependencies on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/install_dependencies.sh"

      - name: Deploy Laravel on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/deploy_laravel.sh"

      - name: Restart Services on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/restart_services.sh"

  update-staging:
    runs-on: ubuntu-latest
    needs: vps-sync

    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/av_rsa
          chmod 600 ~/.ssh/av_rsa
          ssh-keyscan -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy Laravel Project to VPS
        run: |
          ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'bash -s' << 'EOF'
          set -e  # Exit immediately if any command fails

          # Ensure project directory exists
          sudo mkdir -p ~/novatix/app/production

          # Change permissions to allow www-data
          sudo chown -R www-data:www-data ~/novatix/app/production

          # Remove old symlink if exists, then create a new one
          sudo rm -rf /var/www/novatix
          sudo ln -s ~/novatix/app/production /var/www/novatix

          # Set proper ownership
          sudo chown -R www-data:www-data /var/www/novatix

          # Move into project directory
          cd /var/www/novatix

          # Install backend dependencies
          composer install --no-interaction --prefer-dist --optimize-autoloader

          # Install frontend dependencies
          npm install

          # Build frontend assets
          npm run build

          # Set correct permissions
          sudo chown -R www-data:www-data /var/www/novatix
          sudo chmod -R 775 /var/www/novatix/storage /var/www/novatix/bootstrap/cache

          # Cache configurations
          php artisan config:clear
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

          # Run database migrations
          php artisan migrate --force
          EOF

name: NovaTix VPS Production

on:
  push:
    branches:
      - main

jobs:
  vps-sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/av_rsa
          chmod 600 ~/.ssh/av_rsa
          ssh-keyscan -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts

      - name: Ensure Folder Structure & Create Scripts
        run: |
          ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'bash -s' << 'EOF'
          set -e

          echo "Ensuring folder structure..."
          mkdir -p ~/novatix/app/production

          # Ensure update_repo_prod.sh exists
          echo "Creating update_repo_prod.sh..."
          cat > ~/novatix/setups/update_repo_prod.sh << 'EOT'
          #!/bin/bash
          mkdir -p ~/novatix/app/production
          cd ~/novatix

          if [ ! -d "app/production/.git" ]; then
              echo "Repository not found. Checking existing directory..."
              if [ -n "$(ls -A app 2>/dev/null)" ]; then
                  echo "Existing directory found but not a Git repository. Removing everything..."
                  rm -rf app/production
              fi
              echo "Cloning repository..."
              git clone --branch main ${{ secrets.GIT_REPO }} app/production
          else
              echo "Repository found. Pulling latest changes..."
              cd app/production

              git config --global --add safe.directory $(pwd)  # âœ… fix dubious ownership

              git reset --hard HEAD
              git clean -fd
              git pull origin main --force
          fi

          EOT
          chmod +x ~/novatix/setups/update_repo_prod.sh

          EOF

      - name: Update Repository on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/update_repo_prod.sh"

      - name: Install Dependencies on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/install_dependencies.sh"

      - name: Deploy Laravel on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/deploy_laravel.sh"

      - name: Restart Services on VPS
        run: ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "~/novatix/setups/restart_services.sh"

  update-production:
    runs-on: ubuntu-latest
    needs: vps-sync

    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/av_rsa
          chmod 600 ~/.ssh/av_rsa
          ssh-keyscan -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy Laravel Project to VPS
        run: |
          ssh -i ~/.ssh/av_rsa -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'bash -s' << 'EOF'
          set -e

          # Ensure project directory exists
          sudo mkdir -p ~/novatix/app/production

          # Change ownership to www-data for Laravel folders before installation
          sudo chown -R www-data:www-data ~/novatix/app/production

          # Link to /var/www/novatix
          SYMLINK_TARGET=$(realpath ~/novatix/app/production)
          sudo rm -rf /var/www/novatix
          sudo ln -sfn "$SYMLINK_TARGET" /var/www/novatix
          sudo chown -R www-data:www-data /var/www/novatix

          cd /var/www/novatix

          # Prepare folders and fix permissions early
          mkdir -p bootstrap/cache storage/framework/cache storage/framework/sessions storage/framework/views storage/logs
          sudo chown -R www-data:www-data bootstrap/cache storage
          sudo chmod -R 775 bootstrap/cache storage
          sudo chmod g+s bootstrap/cache storage

          # Run composer, npm and artisan as www-data user
          sudo -u www-data composer install --no-interaction --prefer-dist --optimize-autoloader
          sudo -u www-data npm install
          sudo -u www-data npm run build
          sudo -u www-data php artisan migrate
          sudo -u www-data php artisan storage:link

          # Final ownership fix
          sudo chown -R www-data:www-data bootstrap/cache storage
          sudo chmod -R 775 bootstrap/cache storage
          sudo chmod g+s bootstrap/cache storage

          EOF

